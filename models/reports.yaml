models:
  - name: id_stitcher_report
    model_type: report_model
    model_spec:
      materialization:
        output_type: report
        run_type: discrete
      html: |-
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <title>ID Stitcher Report</title>
            <style>
            .table-container {
                margin-bottom: 3em;
            }

            .table-container table {
                border-collapse: collapse;
                width: 50%;
            }

            .table-container th,
            .table-container td {
                border: 1px solid #dddddd;
                text-align: left;
                padding: 0.5em;
            }

            .table-container th {
                background-color: #f2f2f2;
            }

            img {
                max-width: 100%;
                height: auto;
                display: block;
                margin: 1em auto;
            }
            </style>
        </head>

        <body style="text-align: center">
            <img alt="" src="./{{ this.DeRef("static/logo.jpg") }}" style="width: 500px; height: auto" />
            <h1 style="color: green">Testing</h1>
            <h2>ID Graph</h2>
            <p>ID Graph contains top clusters sorted by their size. Each cluster contains top nodes sorted by their degree (Only edges connecting these nodes are shown. These nodes might have more edges which are not shown here)</p>
            <img src="{{this.DbObjectName("id_graph.png")}}" alt="ID Graph">
            <h2>Biggest Cluster</h2>
            <p>Biggest Cluster graph contains top nodes sorted by their degree (Only edges connecting these nodes are shown. These nodes might have more edges which are not shown here)</p>
            <img src="{{this.DbObjectName("biggest_cluster.png")}}" alt="Biggest Cluster">
            <h2>Biggest Cluster</h2>
            <p>
            Biggest Cluster graph contains top nodes sorted by their degree (Only
            edges connecting these nodes are shown. These nodes might have more edges
            which are not shown here)
            </p>
            <h2>Tables</h2>

            <script src="{{ this.DeRef("models/clusters") }}"></script>
            <script src="{{ this.DeRef("models/overall_stats") }}"></script>
            <script src="{{ this.DeRef("models/clusters_sorted_by_size") }}"></script>
            <script src="{{ this.DeRef("models/clusters_sorted_by_dist") }}"></script>
            <script src="{{ this.DeRef("models/top_max_degree_nodes") }}"></script>
            <script src="{{ this.DeRef("models/edges_graph") }}"></script>
            <script src="{{ this.DeRef("models/edges_biggest_cluster") }}"></script>
            <script src="{{ this.DeRef("models/id_type_count") }}"></script>
            <script src="{{ this.DeRef("models/id_count") }}"></script>

            {% set query_models = ["models/clusters", "models/overall_stats", "models/clusters_sorted_by_size", "models/clusters_sorted_by_dist", "models/top_max_degree_nodes", "models/edges_graph", "models/edges_biggest_cluster", "models/id_type_count", "models/id_count"] %}
            <script>
                function renderTable(data, tableName) {
                        const containerDiv = document.createElement("div");
                        containerDiv.classList.add("table-container");

                        const heading = document.createElement("h3");
                        heading.textContent = tableName;
                        containerDiv.appendChild(heading);

                        const table = document.createElement("table");

                        const headerRow = document.createElement("tr");
                        data.Columns.forEach((column) => {
                            const th = document.createElement("th");
                            th.textContent = column;
                            headerRow.appendChild(th);
                        });
                        table.appendChild(headerRow);

                        data.Results.forEach((rowData) => {
                            const row = document.createElement("tr");
                            rowData.forEach((value) => {
                                const td = document.createElement("td");
                                td.textContent = value;
                                row.appendChild(td);
                            });
                            table.appendChild(row);
                        });

                        containerDiv.appendChild(table);

                        document.body.appendChild(containerDiv);
                }

                window.onload = function () {
                    {% for qmodel in query_models %}
                        renderTable({{ this.DeRef(qmodel).Name() }}, "{{ this.DeRef(qmodel).GetModel() }}");
                    {% endfor %}
                };
            </script>
        </body>
        </html>
